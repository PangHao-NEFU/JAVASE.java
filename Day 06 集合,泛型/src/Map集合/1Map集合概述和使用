Map集合是一个接口，是一个键值对，key值不可以重复，每个key可以映射到最多一个值
Interface Map<K,V>
K:key的类型，V:value的类型

1.创建Map集合的对象，要用多态的方式，因为其是一个接口
具体的实现类：HashMap,TreeMap(对key进行排序)


2.map的基本功能和方法
增，改：V put(K key,V value)将指定映射中的指定键相关联，并添加进Map中
        可以添加也可以修改，当key与map中原有的key相同时，会修改原有对应的value值
        key是唯一的，但value可以重复
删：V remove(Object key)根据key删除键值对
清空：void clear（）
查：boolean containsKey(Object key) 查询是否有指定的key
   boolean containsKey(Object value) 查询是否包含指定的value
判空：isEmpty()
长度：size()

3.map集合的获取功能
V get(Object key) 根据key获取value，key不存在就返回null
Set<K> keySet() 获取所有键的集合
Collection<V> values() 获取所有值的集合
Set<Map.Entry<K,V>>entrySet() 获取所有键值对对象的集合

4.map的遍历
    方式一：获取键的集合，.keySet(),用增强for遍历键，再用键去找值.get(key)
    方式二：entrySet()方法,直接获取所有键值对对象的集合，然后根据键值对对象获取key和value
            getKey(),和getValue()

5.Properties，一个特殊的map集合
表示一组持久属性，可以保存到流中或从流中加载，属性列表中的每个键及其对应的值都是字符串
Properties不能加<>泛型，其元素类型默认为Object
特有方法：
Object setProperty(String key, String value) 设置集合的key和value，都是string类型
String getProperty(String key) 在此属性列表中搜索具有指定键的属性。
Set<String> stringPropertyNames() 返回键的集合，其中键及其对应的值是字符串

Properties和io流结合的方法
从文件中加载数据：
void load(InputStream inStream) 从输入字节流中读取属性列表（键和元素对）。
void load(Reader reader) 以简单的面向行的格式从输入字符流中读取属性列表（键和元素对）。
将集合数据写入文件：
void store(OutputStream out, String comments)
    将此 Properties表中的此属性列表（键和元素对）以适合使用 load(InputStream)方法加载到 Properties表的格式写入输出流。
void store(Writer writer, String comments)
    将此 Properties表中的此属性列表（键和元素对）以适合使用 load(Reader)方法的格式写入输出字符流。


