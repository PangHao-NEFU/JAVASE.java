1.面向对象编程思想和函数式编程思想
面向对象思想强调，通过对象形式来做事情，创建对象后调用对象的方法
函数式思想则强调做什么，而不是以什么形式去做，尽量忽略面向对象的复杂语法
Lambda表达式就是函数式思想的体现

匿名内部类和Lambda表达式都可以提供一个接口的实现对象
标准格式

(参数类型1 参数1，参数类型2 参数2，...)->{具体实现的内容，一般为重写的方法}
//()括号里面代表形式参数,有无形式参数是由要重写的方法声明中的参数决定的，如果声明中要求传入参数那就要按照声明要求传参数，
参数类型可以全部省略，但不能单个省略，要不写参数类型，就全不写参数类型
{}里面代表要实现的内容

如果参数只有一个，()可以省略不写
如果代码块语句只有一条可以省略语句的;和{}，如果有return也可以省略掉，注意，只限代码块只有一条语句时可以这么省略！

注意：
1.使用Lambda表达式必须有接口，并且要求接口中只能有一个抽象方法
2.必须有上下文环境，可以推倒出Lambda表达式的意思，可以用于调用方法的参数，或者局部变量的赋值时使用，就是需要一个
还未实现的接口对象时，可以使用

匿名内部类和Lambda的区别
1.所需类型不同，匿名内部类重写的方法可以是接口也可以是抽象类也可以是具体类
             Lambda表达式只能创建接口对象，不可创建抽象类和具体类的对象
2.使用限制：
接口中尚未实现的方法大于1个时，lambda就不可以使用了，但是匿名内部类可以
无论是抽象类具体类还是接口，匿名内部类都可以重写其尚未实现或已经实现的方法，而且可以多于1个在大括号中依次重写方法即可

Lambda写起来非常简单，但是只能用于接口，且接口只能有一个需要重写的方法
匿名内部类可以用于具体类抽象类和接口，而且其中需要重写的方法可以有很多个，但是写起来稍微麻烦一些

3.实现原理不同，匿名内部类的使用会编译单独的.class字节码文件，而Lambda对应的字节码会在运行时动态生成，是不可见的
