一、多态：保留父类的私有属性，而扩展方法的一种操作，在不破坏原有类的基础上重写方法
1.有类继承/接口实现的关系
2.有方法重写
3.有父类/接口引用指向子类对象

二、多态的好处：提高程序扩展性和代码复用性，在定义方法的时候使用父类类型作为参数，在使用时候，
用具体子类型（同一父类可能含有多个子类）参与操作，调用重写方法
弊端：不能使用子类特有的方法，只能使用子类重写父类的方法
工程实用上：当一个类无法满足实用要求时，尽量避免在原有类上进行修改，而是新创建一个类继承自父类，重写
父类的方法，然后用多态的方式进行调用重写后的方法
如果父类想要使用子类的特有方法，就需要把父类对象向下转型为子类
/*总结：多态中成员访问的特点
* 成员变量：编译和执行都看父类的属性
* 成员方法：编译时看父类有无此方法，执行时会执行子类重写的方法*/

三、面向对象的三大特点：
1.封装：保护私有属性，提高安全
2.继承+多态：对原有类的扩展和优化，对于原有模块已经无法满足需要，利用继承和多态在不破坏原有模块的基础上
扩展功能，使用子类重写后的方法

向上转型：父类对象使用子类的重写方法
Animal a= new Cat();

向下转型：如果父类一定要用子类的特有方法（非重写），则可以把父类对象转成子类后调用
Cat c=(Cat)a;
注意，这种转换只能父类转为子类，而一个父类的不同子类是不可以这么转换的

四、抽象类
抽象类和抽象方法，用abstract修饰的类名和方法名，抽象方法：public abstract void 方法名（...）;
抽象方法相当于给了方法声明但是没有给具体实现
抽象类中可以有实例方法，也可以有抽象方法，
抽象类不可以直接实例化，必须通过多态的方式，通过子类对象才能实例化，叫抽象类多态
抽象类的子类要么重写抽象类中的抽象方法，要么也是个抽象子类

抽象类包含的成员是否抽象？：
成员变量：可以是常量final也可以是变量
构造方法：可以有，但是本身不能实例化，只用于子类访问父类数据的初始化
成员方法：可以抽象也可以非抽象，但是必须要求子类要重写父类的抽象方法

五、接口
接口：用关键字interface修饰 public interface 接口名{}，接口也是抽象的
用类实现接口用implements表示  public class 类名 implements 继承的接口名{}
接口的实例化也要参照多态方式
接口的成员特点：
成员变量：默认由final和static修饰，是常量而且属于类
方法：接口不能有构造方法，也不能有非抽象方法，只能有抽象方法，
     默认方法（默认public abstract）也是抽象方法,所以对于接口，直接 void 方法名（）; 即可
     对于接口来说，abstract关键字是冗余的，因为默认就是抽象的

六、类和接口的关系
类和类的关系：单继承，但可以多层继承
类和接口的关系：类实现接口，可以单实现也可以多实现，也可以在继承一个类的时候同时实现多个接口
接口和接口的关系：单继承也可以多继承
public class interImpl extends Object implements Inter1,Inter2,...{}

接口有什么用呢？抽象类是对类进行抽象，包括属性和行为
接口主要是对行为进行抽象，当一个类要增加行为的时候，就可以实现接口

抽象类和接口的使用可以大大提高代码的复用性，类是对事物的抽象，而接口是对行为的抽象
抽象类和接口就好比画板和颜料